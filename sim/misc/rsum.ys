/* rsum.ys */
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call Main		# Execute main program
	halt			# Terminate program 

# Sample linked list
    .align 4
ele1:
    .long 0x00a
    .long ele2
ele2:
    .long 0x0b0
    .long ele3
ele3:
    .long 0xc00
    .long 0

Main:	pushl %ebp 
	rrmovl %esp,%ebp
	irmovl ele1,%edx	
	pushl %edx		# Push linklist head
	call sum		# rsum_list(ele1)

	rrmovl %ebp,%esp
	popl %ebp
	ret 

# int rsum_list(list_ptr ls)
sum:	pushl %ebp
	rrmovl %esp,%ebp
	
	mrmovl 8(%ebp),%edx    # edx = ls
	andl   %edx,%edx	   # 
	je     Nullptr         #if (!ls)
	
	mrmovl 4(%edx),%ecx    # ecx = ls->next
	pushl %ecx             # rsum_list(ecx)
	call sum
	mrmovl 8(%ebp),%edx    # edx = ls
	mrmovl 0(%edx),%ebx    # ebx = ls->val
	addl %ebx, %eax         # eax += ebx

    rrmovl %ebp,%esp
	popl %ebp
	ret
Nullptr:    xorl %eax,%eax		#  return 0;
    rrmovl %ebp,%esp
    popl %ebp
    ret

# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 
