#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
	
	irmovl $1, %esi
	andl %edx, %esi  # even number?
	je Twom          # if not so, goto Twom:
	
	mrmovl (%ebx), %esi	# read val from src...
	iaddl $4, %ebx		# src++ filling the bubble
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N1		# if so, goto N1:
	iaddl $1, %eax		# count++
N1: iaddl $4, %ecx		# dst++
	iaddl $-1, %edx		# len-- <= 0?
	jle Done			# if so, goto Done:
	
Twom: irmovl $2, %esi
	andl %edx, %esi  # 2 mod 4 number?
	je Fourm         # if not so, goto Fourm:
	
	mrmovl (%ebx), %esi	# read val from src...
    iaddl $8, %ebx		# src++ filling the bubble
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N2		# if so, goto N2:
	iaddl $1, %eax		# count++
N2: mrmovl -4(%ebx), %esi	# read val from src...
    iaddl $8, %ecx		# dst++ filling the bubble
    rmmovl %esi, -4(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
	jle N3		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N3: iaddl $-2, %edx		# len-=2 <= 0?
	jle Done			# if so, goto Done:

Fourm: irmovl $4, %esi
    andl %edx, %esi  # 2 mod 4 number?
	je Eightm         # if not so, goto Fourm:
    
    mrmovl (%ebx), %esi	# read val from src...
    mrmovl 4(%ebx), %edi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	rmmovl %edi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N4		# if so, goto N4:
	iaddl $1, %eax		# count++
N4: 	andl %edi, %edi		# val <= 0?
	jle N5		# if so, goto N5:
	iaddl $1, %eax		# count++
N5: mrmovl 8(%ebx), %esi	# read val from src...
    mrmovl 12(%ebx), %edi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	rmmovl %edi, 12(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
	jle N6		# if so, goto N6:
	iaddl $1, %eax		# count++
N6: 	andl %edi, %edi		# val <= 0?
	jle N7		# if so, goto N7:
	iaddl $1, %eax		# count++
N7: 
    iaddl $16, %ebx		# ebx++
    iaddl $16, %ecx		# ecx++
    iaddl $-4, %edx		# len-=4 <= 0?
	jle Done			# if so, goto Done:

Eightm: irmovl $8, %esi
    andl %edx, %esi  # 4 mod 8 number?
	je Hexm         # if not so, goto Fourm:
	
    
    mrmovl (%ebx), %esi	# read val from src...
    mrmovl 4(%ebx), %edi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	rmmovl %edi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N8		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N8: 	andl %edi, %edi		# val <= 0?
	jle N9		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N9: mrmovl 8(%ebx), %esi	# read val from src...
    mrmovl 12(%ebx), %edi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	rmmovl %edi, 12(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
	jle N10		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N10: 	andl %edi, %edi		# val <= 0?
	jle N11		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N11: mrmovl 16(%ebx), %esi	# read val from src...
    mrmovl 20(%ebx), %edi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	rmmovl %edi, 20(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N12		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N12: 	andl %edi, %edi		# val <= 0?
	jle N13		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N13: mrmovl 24(%ebx), %esi	# read val from src...
    mrmovl 28(%ebx), %edi	# read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	rmmovl %edi, 28(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
	jle N14		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N14: 	andl %edi, %edi		# val <= 0?
	jle N15		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N15: 
    iaddl $32, %ebx		# ebx++
    iaddl $32, %ecx		# ecx++
    iaddl $-8, %edx		# len-=8 > 0?
	jle Done			# if so, goto Done:

Hexm: 
    mrmovl (%ebx), %esi	# read val from src...
    mrmovl 4(%ebx), %edi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	rmmovl %edi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N16		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N16: 	andl %edi, %edi		# val <= 0?
	jle N17		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N17: mrmovl 8(%ebx), %esi	# read val from src...
    mrmovl 12(%ebx), %edi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	rmmovl %edi, 12(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
	jle N18		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N18: 	andl %edi, %edi		# val <= 0?
	jle N19		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N19: mrmovl 16(%ebx), %esi	# read val from src...
    mrmovl 20(%ebx), %edi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	rmmovl %edi, 20(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N20		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N20: 	andl %edi, %edi		# val <= 0?
	jle N21		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N21: mrmovl 24(%ebx), %esi	# read val from src...
    mrmovl 28(%ebx), %edi	# read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	rmmovl %edi, 28(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
	jle N22		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N22: 	andl %edi, %edi		# val <= 0?
	jle N23		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N23: mrmovl 32(%ebx), %esi	# read val from src...
    mrmovl 36(%ebx), %edi	# read val from src...
	rmmovl %esi, 32(%ecx)	# ...and store it to dst
	rmmovl %edi, 36(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N24		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N24: 	andl %edi, %edi		# val <= 0?
	jle N25		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N25: mrmovl 40(%ebx), %esi	# read val from src...
    mrmovl 44(%ebx), %edi	# read val from src...
	rmmovl %esi, 40(%ecx)	# ...and store it to dst
	rmmovl %edi, 44(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
	jle N26		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N26: 	andl %edi, %edi		# val <= 0?
	jle N27		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N27: mrmovl 48(%ebx), %esi	# read val from src...
    mrmovl 52(%ebx), %edi	# read val from src...
	rmmovl %esi, 48(%ecx)	# ...and store it to dst
	rmmovl %edi, 52(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle N28		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N28: 	andl %edi, %edi		# val <= 0?
	jle N29		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N29: mrmovl 56(%ebx), %esi	# read val from src...
    mrmovl 60(%ebx), %edi	# read val from src...
	rmmovl %esi, 56(%ecx)	# ...and store it to dst
	rmmovl %edi, 60(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
	jle N30		# if so, goto Nposa:
	iaddl $1, %eax		# count++
N30: 	andl %edi, %edi		# val <= 0?
	jle N31		# if so, goto Nposb:
	iaddl $1, %eax		# count++
N31: 
    iaddl $64, %ebx		# ebx++
    iaddl $64, %ecx		# ecx++
    iaddl $-16, %edx		# len-=8 > 0?
    jg Hexm
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	leave
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
